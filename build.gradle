buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()

        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7+'

        classpath group: 'org.parchmentmc', name: 'librarian', version: "1.+"
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

apply plugin: 'org.parchmentmc.librarian.forgegradle'


version = "${minecraft_min_version}-forge-${mod_version}"
group = "${mod_base_package}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

//just for compatilily
sourceSets {
//    main {
//        resources {
//            srcDirs = [
//                    "$rootDir/src/main/resources",
//                    'src/generated/resources'
//            ]
//        }
//    }
    onlyMain {
    }
}
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
//    mappings channel: 'official', version: "${minecraft_min_version}"
    mappings channel: 'parchment', version: "${parchment_mappings}"

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // use for logger control
            property 'forgegradle.runs.dev', 'true'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.onlyMain
                }
            }

        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // use for logger control
            property 'forgegradle.runs.dev', 'true'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'

            property 'forgegradle.runs.runServer', 'true'
            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'mixin.debug.export', 'true'

            // add runData info
            property 'forgegradle.runs.runData', 'true'
            property 'forgegradle.runs.dev', 'true'
            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    // Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "${mod_id}.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}
// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '**/*.cache'
}
repositories {
    flatDir {
        dirs("libs")
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url "https://harleyoconnor.com/maven"
    }

//    flatDir name: 'libs', dirs: 'libs'
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_min_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("com.ferreusveritas.dynamictrees:DynamicTrees-1.20.1:1.3.6")

    onlyMainRuntimeOnly fg.deobf("curse.maven:minemenu-222378:4938047")

    onlyMainRuntimeOnly fg.deobf("curse.maven:journeymap-32274:4873848")
    runtimeOnly fg.deobf("curse.maven:jade-324717:5072729")
    runtimeOnly fg.deobf("curse.maven:jei-238222:5101366")

    compileOnly fg.deobf("curse.maven:oculus-581495:6020952")

    onlyMainRuntimeOnly fg.deobf("curse.maven:embeddium-908741:5681725")
    onlyMainRuntimeOnly fg.deobf("curse.maven:oculus-581495:6020952")


//    Some jar contains jarjar, we need to extract it and delete the file
    println("----Scan libs begin----")
    fileTree(dir: 'libs', include: ['*.jar']).each { File file ->
        def fileName = file.name
        println(fileName.substring(0, fileName.indexOf("-")) + "," + fileName.substring(fileName.indexOf("-") + 1, fileName.indexOf(".jar")))
        runtimeOnly fg.deobf(name: fileName.substring(0, fileName.indexOf(".jar")),
                group: 'libs',
                version: fileName.substring(0, fileName.indexOf(".jar")))
    }
    println("----Scan libs end----")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "${mod_authors}",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : "${mod_id}",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "${mod_authors}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json"
        ])
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version_range   : minecraft_version_range,
            forge_version_range       : forge_version_range,
            loader_version_range      : loader_version_range,
            mod_id                    : mod_id,
            mod_name                  : mod_name,
            mod_license               : mod_license,
            mod_version               : mod_version,
            mod_authors               : mod_authors,
            mod_description           : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.register('deleteCache') {
    delete 'src/generated/resources/.cache'
}

jar.dependsOn deleteCache

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


